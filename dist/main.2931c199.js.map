{"mappings":"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","sources":["./src/util.js","./src/state.js","./src/expr.js","./src/display.js","./src/view.js","./src/main.js"],"sourcesContent":["const Either = (() => {\n  const Left = x => ({ isLeft: true, value: x })\n  const Right = x => ({ isLeft: false, value: x })\n\n  const match = pattern => e => e.isLeft ? pattern.Left(e.value) : pattern.Right(e.value)\n\n  const bind = f => match({\n    Left: e => Left(e),\n    Right: a => f(a)\n  })\n\n  const chain = x => f => bind(f)(x)\n\n  const pure = Right\n\n  const map = f => match({\n    Left: e => Left(e),\n    Right: x => Right(f(x))\n  })\n\n  return {\n    Left, Right, match, bind, chain, pure, map\n  }\n})()\n\nconst Maybe = (() => {\n  const Nothing = { isJust: false }\n  const Just = x => ({ isJust: true, value: x })\n\n  const match = pattern => x => x.isJust ? pattern.Just(x.value) : pattern.Nothing()\n\n  const maybe = n => f => match({\n    Nothing: () => n,\n    Just: x => f(x)\n  })\n\n  return { Nothing, Just, match, maybe }\n\n})()\n\nconst String = (() => {\n  const append = s1 => s2 => s1.concat(s2)\n  const empty = \"\"\n  return { append, empty }\n})()\n\nconst takeWhile = f => xs => {\n  let res = []\n  for (let i = 0; i < xs.length; i++) {\n    if (f(xs[i])) {\n      res.push(xs[i])\n    } else {\n      return res\n    }\n  }\n  return res\n}\n\nconst last = xs => xs[xs.length - 1]\n\nconst lastBy = pred => xs => xs.reduce((acc, x) => pred(x) ? Maybe.Just(x) : acc, Maybe.Nothing)\n\nconst any = f => xs => xs.reduce((acc, x) => f(x) || acc, false)\n\nconst compose = (...fs) => x => fs.reduceRight((acc, f) => f(acc), x)\n\nconst fold = monoid => xs => xs.reduce((acc, x) => monoid.append(acc)(x), monoid.empty)\n\nconst tail = xs => xs.slice(0, xs.length - 1)\n\nconst panic = message => { throw new Error(message) }\n\nconst roundSig = n => x => {\n  if (x === 0) return 0\n\n  const d = Math.ceil(Math.log10(x < 0 ? -x : x))\n  const p = n - d\n  const m = Math.pow(10, p)\n  const s = Math.round(x * m)\n  return s / m\n}\n\nexport default { Either, Maybe, String, takeWhile, panic, any, last, lastBy, compose, fold, tail, roundSig }\n","import util from \"./util.js\"\nimport { Token, interpret, parse } from \"./expr.js\"\n\nconst { Nothing, Just } = util.Maybe\nconst Either = util.Either\nconst { Left, Right } = Either\n\n// Messages that the UI can send\nexport const Action = (() => {\n  const mkAction = tag => value => ({ tag, value })\n  const match = pattern => x => pattern[x.tag](x.value)\n\n  return {\n    match,\n    digit: mkAction(\"digit\"),\n    dot: mkAction(\"dot\")(),\n    operator: mkAction(\"operator\"),\n    equals: mkAction(\"equals\")(),\n    clear: mkAction(\"clear\")()\n  }\n})()\n\nexport const initialState = () => ({\n  tokens: [], // An array of tokens that will be parsed and interpreted when = is pressed, e.g. [number(2), add, number(2)]\n  numberBuilder: [], // An array of (string) digits that may contain a dot, will eventually be parsed into a number token\n  error: Nothing\n})\n\n// A redux-style reducer that takes an action and produces a new state\nexport const reducer = action => ({tokens, numberBuilder}) => {\n  return Action.match({\n    digit: x => ({\n      tokens,\n      numberBuilder: tooManyDigits(numberBuilder) ? numberBuilder : [...numberBuilder, String(x)],\n      error: Nothing\n    }),\n    dot: () => ({\n      tokens,\n      numberBuilder: hasDot(numberBuilder) ? numberBuilder : [...numberBuilder, \".\"],\n      error: Nothing\n    }),\n    // Replaces old operator with new operator if two operator buttons are pressed in a row\n    operator: x => {\n      const newTokens = (() => {\n        if (numberBuilder.length === 0) {\n          if (tokens.length === 0) return []\n          if (lastIsOperator(tokens)) return [...util.tail(tokens), Token.operator(x)]\n          return [...tokens, Token.operator(x)]\n        } else {\n          return [...tokens, mkNumber(numberBuilder), Token.operator(x)]\n        }\n      })()\n\n      return {\n        tokens: newTokens,\n        numberBuilder: [],\n        error: Nothing\n      }\n    },\n    equals: () => handleEquals(tokens, numberBuilder),\n    clear: () => initialState()\n  })(action)\n}\n\nconst hasDot = util.any(x => x === \".\")\n\n// Assumes that there is only one dot in the array to keep things simple, this is enforced in the reducer itself\nexport const mkNumber = util.compose(Token.number, Number, util.fold(util.String))\n\nexport const lastIsOperator = util.compose(x => x && Token.isOperator(x), util.last)\n\nconst tooManyDigits = xs => xs.filter(x => x !== \".\").length >= 10\n\nconst errorOnOverflow = Either.bind(x => String(x).split(\".\")[0].split(\"\").length > 10 ? Left(\"Error\") : Right(x))\n\nconst evaluate = util.compose(errorOnOverflow, interpret, parse)\n\nexport const handleEquals = (tokens, numberBuilder) => {\n  const answer = evaluate(numberBuilder.length === 0 ? stripTrailingOperator(tokens) : [...tokens, mkNumber(numberBuilder)])\n  return Either.match({\n    Left: e => ({ tokens: [], numberBuilder: [], error: Just(e) }),\n    Right: x => ({ tokens: [ Token.number(x) ], numberBuilder: [], error: Nothing })\n  })(answer)\n}\n\nconst stripTrailingOperator = tokens => util.last(tokens) && util.last(tokens).tag === \"operator\"\n  ? util.tail(tokens)\n  : tokens\n","// Functions to parse and interpret expressions\n\nimport util from \"./util.js\"\n\nconst Either = util.Either\nconst { Left, Right } = Either\n\nexport const Token = (() => {\n  const mkToken = tag => value => ({ tag, value })\n  const operator = mkToken(\"operator\")\n\n  const precedence = op => {\n    const prec = {\n      add: 1,\n      subtract: 1,\n      multiply: 2,\n      divide: 2\n    }\n    return prec[op]\n  }\n\n  return {\n    precedence,\n    isNumber: ({ tag }) => tag === \"number\",\n    isOperator: ({ tag }) => tag === \"operator\",\n    number: mkToken(\"number\"),\n    operator,\n    add: operator(\"add\"),\n    subtract: operator(\"subtract\"),\n    multiply: operator(\"multiply\"),\n    divide: operator(\"divide\")\n  }\n})()\n\nexport const Expr = (() => {\n  const mkExpr = tag => left => right => operator => ({ tag, left, right, operator })\n\n  const match = pattern => t => {\n    switch (t.tag) {\n      case \"val\":\n        return pattern[t.tag](t.left)\n      case \"binary\":\n        return pattern[t.tag](t.left)(t.right)(t.operator)\n      default:\n        return util.panic(`Unknown Expr tag ${t.tag}`)\n    }\n  }\n\n  return {\n    match,\n    val: val => mkExpr(\"val\")(val)()(),\n    binary: mkExpr(\"binary\")\n  }\n})()\n\n// Builds an Expr tree given an array of tokens. Based on the shunting-yard algorithm.\nexport const parse = tokens => {\n\n  const higherPrec = a => b => {\n    return Token.precedence(a) <= Token.precedence(b)\n  }\n\n  const addOps = (operands, operators) => operators.reduce((acc, operator) => {\n    const [r, l, ...rest] = acc\n    return [Expr.binary(l)(r)(operator), ...rest]\n  }, operands)\n\n  const go = ({operands, operators}, token) => {\n    if (token.tag === \"number\") {\n      return { operands: [Expr.val(token.value), ...operands], operators }\n    } else {\n      const preceding = util.takeWhile(higherPrec(token.value))(operators)\n      return {\n        operands: addOps(operands, preceding),\n        operators: [token.value, ...operators.slice(preceding.length)]\n      }\n    }\n  }\n\n  const res = tokens.reduce(go, { operands: [], operators: [] })\n\n  return addOps(res.operands, res.operators)[0]\n}\n\nexport const interpret = expr => {\n  const operators = {\n    add: a => b => Right(a + b),\n    subtract: a => b => Right(a - b),\n    multiply: a => b => Right(a * b),\n    divide: a => b => b === 0 ? Left(\"Undefined\") : Right(a / b)\n  }\n\n  const rec = e => {\n    return Expr.match({\n      val: x => Right(x),\n      binary: l => r => op => Either.chain(rec(l))(lc => Either.chain(rec(r))(rc => operators[op](lc)(rc)))\n    })(e)\n  }\n\n  return rec(expr)\n}\n","// Function to compute the number to display based on the current state\n\nimport util from \"./util.js\"\nimport { Token } from \"./expr.js\"\nimport { handleEquals } from \"./state.js\"\n\nconst Maybe = util.Maybe\n\nexport const display = ({ tokens, numberBuilder, error }) => {\n  return Maybe.match({\n    Just: e => e,\n    Nothing: () => {\n      // This behavior is different from typical simple calculator behavior, but it seems to be what\n      // the spec requires based on the examples.\n      return numberBuilder.length === 0\n        ? intermediateDisplay(tokens, numberBuilder)\n        : numDisplay(tokens, numberBuilder)\n    }\n  })(error)\n}\n\nexport const intermediateDisplay = (tokens, numberBuilder) => {\n  const last = lastOperator(util.tail(tokens))\n  return Maybe.match({\n    Nothing: () => numDisplay(tokens, numberBuilder),\n    Just: op => Token.precedence(op.value) === Token.precedence(util.last(tokens).value)\n      ? display(handleEquals(tokens, numberBuilder))\n      : numDisplay(tokens, numberBuilder)\n  })(last)\n}\n\nexport const numDisplay = (tokens, numberBuilder) => numberBuilder.length === 0\n  ? Maybe.maybe(\"\")(x => String(util.roundSig(10)(x.value)))(lastNumber(tokens))\n  : util.fold(util.String)(numberBuilder)\n\nconst lastOperator = util.lastBy(Token.isOperator)\n\nconst lastNumber = util.lastBy(Token.isNumber)\n","import { Action } from \"./state.js\"\nimport util from \"./util.js\"\n\nexport const initialize = doc => send => {\n  const container = doc.getElementById(\"app\")\n  const html = view(doc)(send)\n  container.append(html)\n}\n\nexport const redraw = doc => value => {\n  const display = doc.getElementById(\"display\")\n  display.textContent = value\n}\n\nexport const view = doc => util.compose(createElement(doc), calculator)\n\nconst createElement = doc => elem => {\n  const children = elem.children.map(createElement(doc))\n  let root = doc.createElement(elem.tagName)\n  root.append(...children)\n  return Object.assign(root, elem.props)\n}\n\nexport const calculator = send => element(\"div\", { className: \"calculator\" }, [\n  display,\n  clear, padding, divide,\n  ...[7,8,9].map(digit), multiply,\n  ...[4,5,6].map(digit), subtract,\n  ...[1,2,3].map(digit), add,\n  zero, dot, equals\n].map(c => c(send)))\n\nconst display = () => element(\"div\", { className: \"display\", id: \"display\" }, [])\n\nconst clear = send => button(() => send(Action.clear), \"digit span-2\", \"C\")\n\nconst padding = () => element(\"div\", { className: \"padding\" }, [])\n\nconst digit = n => send => button(() => send(Action.digit(n)), \"digit\", n)\n\nconst zero = send => button(() => send(Action.digit(0)), \"digit span-2\", 0)\n\nconst dot = send => button(() => send(Action.dot), \"digit\", \".\")\n\nconst operator = (op, symbol) => send => button(() => send(Action.operator(op)), \"operator\", symbol)\n\nconst multiply = operator(\"multiply\", \"*\")\nconst divide = operator(\"divide\", \"/\")\nconst subtract = operator(\"subtract\", \"-\")\nconst add = operator(\"add\", \"+\")\n\nconst equals = send => button(() => send(Action.equals), \"operator\", \"=\")\n\nconst button = (onclick, className, textContent) => element(\"button\", { onclick, className, textContent }, [])\n\nconst element = (tagName, props, children) => ({ tagName, props, children })\n","import { initialState, reducer } from \"./state.js\"\nimport { display } from \"./display.js\"\nimport { initialize, redraw } from \"./view.js\"\n\nconst main = () => {\n  let state = initialState()\n  const send = action => {\n    state = reducer(action)(state)\n    redraw(document)(display(state))\n  }\n  initialize(document)(send)\n}\n\nmain()\n"],"names":["Left","Right","match","bind","Either","f","e","a","x","isLeft","value","pattern","chain","pure","map","Maybe","isJust","Just","Nothing","maybe","n","String","append","s1","s2","concat","empty","takeWhile","xs","res","i","length","push","panic","message","Error","any","reduce","acc","last","lastBy","pred","compose","_len","arguments","fs","Array","_key","reduceRight","fold","monoid","tail","slice","roundSig","d","Math","ceil","log10","p","m","pow","round","$ad2a09d4c49b54e19445f9e5617620da$var$_util","$e21c283ecb75cd4534689fdeb34870c$exports","$d775ecf012ad6864a98cf6061302$var$_util","$d775ecf012ad6864a98cf6061302$var$_interopRequireDefault","mkToken","operator","util","Token","tag","precedence","op","add","subtract","multiply","divide","isNumber","_ref","isOperator","_ref2","number","mkExpr","Expr","t","left","right","val","binary","tokens","addOps","operands","operators","_acc","$d775ecf012ad6864a98cf6061302$var$_toArray","r","l","rest","$d775ecf012ad6864a98cf6061302$var$_toConsumableArray","_ref3","token","preceding","b","expr","rec","lc","rc","mkAction","Action","digit","dot","equals","clear","initialState","numberBuilder","error","action","tooManyDigits","$ad2a09d4c49b54e19445f9e5617620da$var$_toConsumableArray","hasDot","lastIsOperator","mkNumber","handleEquals","Number","filter","errorOnOverflow","split","evaluate","interpret","parse","answer","stripTrailingOperator","$e71a430a1c89429e7ed371f0c98b$var$_util","$e71a430a1c89429e7ed371f0c98b$var$_interopRequireDefault","display","intermediateDisplay","numDisplay","lastOperator","$ad2a09d4c49b54e19445f9e5617620da$exports","lastNumber","$a0ea45f70f6d948738e2e137a1f62275$var$_util","$a0ea45f70f6d948738e2e137a1f62275$var$_interopRequireDefault","doc","send","container","getElementById","html","view","textContent","createElement","calculator","elem","children","root","tagName","apply","$a0ea45f70f6d948738e2e137a1f62275$var$_toConsumableArray","Object","assign","props","element","className","padding","zero","c","state","id","button","symbol","onclick","$a0ea45f70f6d948738e2e137a1f62275$exports","initialize","document","reducer","redraw","$e71a430a1c89429e7ed371f0c98b$exports"],"version":3,"file":"main.2931c199.js.map"}